#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

#define N 1024 // Matrix dimension

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (N % size != 0) {
        if (rank == 0)
            fprintf(stderr, "Matrix size %d must be divisible by number of processes %d\n", N, size);
        MPI_Finalize();
        return 1;
    }

    int rows_per_proc = N / size;

    float *A = (float*)malloc(rows_per_proc * N * sizeof(float));
    float *B = (float*)malloc(N * N * sizeof(float));
    float *C = (float*)malloc(rows_per_proc * N * sizeof(float));

    if (!A || !B || !C) {
        fprintf(stderr, "Rank %d: Memory allocation failed\n", rank);
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    // Initialize B matrix (identity matrix) on root
    if (rank == 0) {
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                B[i*N + j] = (i == j) ? 1.0f : 0.0f;
            }
        }
    }

    // Initialize A matrix locally
    for (int i = 0; i < rows_per_proc; i++) {
        for (int j = 0; j < N; j++) {
            A[i*N + j] = (float)(rank * rows_per_proc + i + j);
        }
    }

    // Broadcast B to all processes
    MPI_Bcast(B, N*N, MPI_FLOAT, 0, MPI_COMM_WORLD);

    double start = MPI_Wtime();

    // Matrix multiplication using OpenMP inside MPI process
    #pragma omp parallel for collapse(2)
    for (int i = 0; i < rows_per_proc; i++) {
        for (int j = 0; j < N; j++) {
            float sum = 0.0f;
            for (int k = 0; k < N; k++) {
                sum += A[i*N + k] * B[k*N + j];
            }
            C[i*N + j] = sum;
        }
    }

    double end = MPI_Wtime();

    // Gather results
    float *global_C = NULL;
    if (rank == 0) {
        global_C = (float*)malloc(N * N * sizeof(float));
    }

    MPI_Gather(C, rows_per_proc*N, MPI_FLOAT,
               global_C, rows_per_proc*N, MPI_FLOAT,
               0, MPI_COMM_WORLD);

    if (rank == 0) {
        printf("Matrix multiplication (%dx%d) with %d processes and OpenMP threads took %.4f seconds\n",
               N, N, size, end - start);
        free(global_C);
    }

    free(A);
    free(B);
    free(C);

    MPI_Finalize();
    return 0;
}

