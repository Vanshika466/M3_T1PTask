include <stdlib.h>  // Added for malloc()
#include <stdio.h>
#include <mpi.h>
#include <math.h>    // For fabs() in validation

#define N 1024       // Matrix dimension
#define EPSILON 1e-6 // Tolerance for floating-point comparison

void initialize_matrices(float *A, float *B, int rows_per_proc, int rank) {
    // Initialize matrices with predictable values
    for (int i = 0; i < rows_per_proc; i++) {
        for (int j = 0; j < N; j++) {
            A[i*N + j] = (float)(rank * rows_per_proc + i + j);
            B[i*N + j] = (float)(i - j);
        }
    }
}

int main(int argc, char** argv) {
    MPI_Init(&argc, &argv);
   
    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    if (N % size != 0) {
        if (rank == 0) {
            fprintf(stderr, "Matrix size %d must be divisible by number of processes %d\n", N, size);
 }
        MPI_Finalize();
        return 1;
    }

    int rows_per_proc = N / size;
    float *A = malloc(rows_per_proc * N * sizeof(float));
    float *B = malloc(N * N * sizeof(float));
    float *C = malloc(rows_per_proc * N * sizeof(float));

    if (!A || !B || !C) {
        fprintf(stderr, "Rank %d: Memory allocation failed\n", rank);
        MPI_Abort(MPI_COMM_WORLD, 1);
    }

    initialize_matrices(A, B, rows_per_proc, rank);

    double start = MPI_Wtime();

    // Matrix multiplication
    for (int i = 0; i < rows_per_proc; i++) {
        for (int j = 0; j < N; j++) {
            C[i*N + j] = 0.0f;
            for (int k = 0; k < N; k++) {
                C[i*N + j] += A[i*N + k] * B[k*N + j];
            }
        }
    }
 double end = MPI_Wtime();
    if (rank == 0) {
        printf("Matrix multiplication (%dx%d) with %d processes took %.4f seconds\n",
               N, N, size, end - start);
    }

    // Cleanup
    free(A);
    free(B);
    free(C);
    MPI_Finalize();
    return 0;
}
